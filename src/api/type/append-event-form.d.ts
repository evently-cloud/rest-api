/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Select events that occur after this event ID.
 */
export type After = string

/**
 * Append an event to the ledger by creating a request body that matches this schema and POSTing it back to APPEND_URI endpoint. If provided, the `selector` will be checked first to see if new matching events have been appended, and if none have been, then this event will be appended.
 */
export interface AppendEventForm {
  /**
   * Name of the event being appended.
   */
  event: string
  entities: Entities
  /**
   * Event metadata. Use properties that are common to all events, like correlationId, actor and causationId. Evently creates an append timestamp value automatically, so clients can omit putting a timestamp in meta.
   */
  meta?: {
    [k: string]: unknown
  }
  /**
   * Event data can be any type of data, from a string to an object with multiple values. The data is specific to the event.
   */
  data?:
    | string
    | number
    | boolean
    | {
        [k: string]: unknown
      }
    | unknown[]
  /**
   * Unique key identifying the append event's idempotency. This key will instruct evently to ignore duplicate append submissions instead of sending an error response.
   */
  idempotencyKey?: string
  /**
   * Identifies the selector to use to check for new events. If new events match the selector, then the append event is rejected.
   */
  selector?:
    | {
        after?: After
        entities: Entities1
        events?: DataQuery
        meta?: MetaQuery
      }
    | {
        after?: After
        entities?: Entities1
        events: DataQuery
        meta?: MetaQuery
      }
    | {
        after?: After
        entities?: Entities1
        events?: DataQuery
        meta: MetaQuery
      }
}
/**
 * The key is the name of the entity, value is an array of entity ID values.
 */
export interface Entities {
  /**
   * @minItems 1
   *
   * This interface was referenced by `Entities`'s JSON-Schema definition
   * via the `patternProperty` "^[^\x00-\x1F\x80-\x9F]{1,80}$".
   *
   * This interface was referenced by `Entities1`'s JSON-Schema definition
   * via the `patternProperty` "^[^\x00-\x1F\x80-\x9F]{1,80}$".
   */
  [k: string]: [string, ...string[]]
}
export interface Entities1 {
  /**
   * @minItems 1
   *
   * This interface was referenced by `Entities`'s JSON-Schema definition
   * via the `patternProperty` "^[^\x00-\x1F\x80-\x9F]{1,80}$".
   *
   * This interface was referenced by `Entities1`'s JSON-Schema definition
   * via the `patternProperty` "^[^\x00-\x1F\x80-\x9F]{1,80}$".
   */
  [k: string]: [string, ...string[]]
}
/**
 * Filter by event data values. Keys are event names, and the values are SQL JSONPath query objects.
 */
export interface DataQuery {
  [k: string]: JsonpathQuery
}
/**
 * JSONPath query to filter JSON objects.
 */
export interface JsonpathQuery {
  /**
   * A JSONPath query statement. Can include named variables, like '$age' or '$orderNumber'.
   */
  query: string
  /**
   * If the query contains named variables, they are stored in this object. The object keys are the variable names, without the preceding '$', like 'age' and 'orderNumber'.
   */
  vars?: {
    [k: string]: unknown
  }
}
/**
 * SQL JSONPath filter on the event's meta object.
 */
export interface MetaQuery {
  /**
   * A JSONPath query statement. Can include named variables, like '$age' or '$orderNumber'.
   */
  query: string
  /**
   * If the query contains named variables, they are stored in this object. The object keys are the variable names, without the preceding '$', like 'age' and 'orderNumber'.
   */
  vars?: {
    [k: string]: unknown
  }
}
